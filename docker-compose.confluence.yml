version: '3.8'

services:
  # PostgreSQL database for storing documentation data
  postgres:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: confluence_docs_postgres
    environment:
      POSTGRES_DB: confluence_docs
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d confluence_docs"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    container_name: confluence_docs_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Main Confluence Documentation Generator API
  confluence_generator:
    build:
      context: .
      dockerfile: confluence_generator/Dockerfile
    container_name: confluence_generator_api
    environment:
      # Database configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: confluence_docs
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # API Keys (set these in your .env file)
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
      AZURE_OPENAI_VERSION: ${AZURE_OPENAI_VERSION}
      
      # Confluence configuration
      CONFLUENCE_BASE_URL: ${CONFLUENCE_BASE_URL}
      CONFLUENCE_USERNAME: ${CONFLUENCE_USERNAME}
      CONFLUENCE_API_TOKEN: ${CONFLUENCE_API_TOKEN}
      
      # Application configuration
      LOG_LEVEL: INFO
      ENVIRONMENT: development
    ports:
      - "8002:8002"
    volumes:
      - ./confluence_generator:/app
      - ./api:/app/deepwiki_api  # Mount original deepwiki API for reuse
      - repo_cache:/app/repos
      - doc_cache:/app/wikicache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # MCP Server for exposing documentation data
  mcp_server:
    build:
      context: .
      dockerfile: confluence_generator/Dockerfile.mcp
    container_name: confluence_mcp_server
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: confluence_docs
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOG_LEVEL: INFO
    ports:
      - "8003:8003"
    volumes:
      - ./confluence_generator:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Agent Workers (scaled instances for parallel processing)
  agent_worker:
    build:
      context: .
      dockerfile: confluence_generator/Dockerfile.worker
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: confluence_docs
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      WORKER_TYPE: agent_worker
      LOG_LEVEL: INFO
    volumes:
      - ./confluence_generator:/app
      - ./api:/app/deepwiki_api
      - repo_cache:/app/repos
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    scale: 3

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    container_name: confluence_docs_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: confluence_docs_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: confluence_docs_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - confluence_generator
      - mcp_server
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  postgres_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  repo_cache:
    driver: local
  doc_cache:
    driver: local

networks:
  default:
    name: confluence_docs_network
    driver: bridge